{
  "name": "IOU",
  "tagline": "A+ Promises for Java",
  "body": "IOU is a promise-library that adheres to the [A+ spec](https://github.com/promises-aplus/promises-spec) as closely as possible. It is written in Java, so it can be plugged in to any regular Java, Groovy, Kotlin or Android-project.\r\n\r\n[Implementations](#implementations)\r\n\r\n[Dependency management](#dependency-management)\r\n  * [Maven](#maven)\r\n  * [Gradle](#gradle)\r\n\r\n[Examples](#examples)\r\n  * [Call with single then](#call-with-single-then)\r\n  * [Call with single then and Java 8 lambda](#call-with-single-then-and-java-8-lambda)\r\n  * [Chained or piped promise](#chained-or-piped-promise)\r\n  * [Parallel promise](#parallel-promise)\r\n  * [Rejecting a promise](#rejecting-a-promise)\r\n  * [Failing a promise](#failing-a-promise)\r\n\r\n## Implementations\r\n* [IOU Java](https://github.com/ioweyou/iou-java)\r\n* [IOU Android](https://github.com/ioweyou/iou-android)\r\n\r\n## Dependency management\r\n### Maven\r\n-----\r\n#### Regular\r\n```xml\r\n<dependency>\r\n    <groupId>nl.brusque.iou</groupId>\r\n    <artifactId>iou-java</artifactId>\r\n    <version>1.0.0-beta-02</version>\r\n</dependency>\r\n```\r\n#### Android \r\n```xml\r\n<dependency>\r\n    <groupId>nl.brusque.iou</groupId>\r\n    <artifactId>iou-android</artifactId>\r\n    <version>1.0.0-beta-01</version>\r\n</dependency>\r\n```\r\n\r\n### Gradle\r\n-----\r\n#### Regular\r\n```\r\ncompile 'nl.brusque.iou:iou-java:1.0.0-beta-02'\r\n```\r\n#### Android\r\n```\r\ncompile 'nl.brusque.iou:iou-android:1.0.0-beta-01'\r\n```\r\n\r\n## Examples\r\n-----\r\n### Given the example implementation\r\n```java\r\nclass TestTypedIOU<TInput> extends AbstractIOU<TInput> {\r\n  ...\r\n}\r\n\r\nclass TestTypedPromise<TInput> extends AbstractPromise<TInput> {\r\n  ...\r\n}\r\n\r\nTestTypedIOU<Integer> iou = new TestTypedIOU<>();\r\n\r\n```\r\n### Call with single then\r\n```java\r\niou.getPromise()\r\n    .then(new IThenCallable<Integer, Void>() {\r\n        @Override\r\n        public Void apply(Integer integer) throws Exception {\r\n            System.out.println(integer);\r\n\r\n            return null;\r\n        }\r\n    });\r\n\r\niou.resolve(42); // prints 42\r\n```\r\n### Call with single then and Java 8 lambda\r\n```java\r\niou.getPromise()\r\n    .then((Integer integer) -> {\r\n        System.out.println(integer);\r\n\r\n        return null;\r\n    });\r\n\r\niou.resolve(42); // prints 42\r\n```\r\n### Chained or piped promise\r\n```java\r\niou.getPromise()\r\n    .then(new IThenCallable<Integer, Integer>() {\r\n        @Override\r\n        public Integer apply(Integer input) throws Exception {\r\n            return input * 10;\r\n        }\r\n    })\r\n    .then(new IThenCallable<Integer, String>() {\r\n        @Override\r\n        public String apply(Integer input) throws Exception {\r\n            return String.format(\"The result: %d\", input);\r\n        }\r\n    })\r\n    .then(new IThenCallable<String, Void>() {\r\n        @Override\r\n        public Void apply(String input) throws Exception {\r\n            System.out.println(input);\r\n\r\n            return null;\r\n        }\r\n    });\r\n\r\niou.resolve(42); // prints \"The result: 420\"\r\n```\r\n### Sequential promise\r\n```java\r\nTestTypedPromise<Integer> promise = iou.getPromise();\r\n\r\npromise\r\n    .then(new IThenCallable<Integer, Void>() {\r\n        @Override\r\n        public Void apply(Integer input) throws Exception {\r\n            System.out.println(input);\r\n\r\n            return null;\r\n        }\r\n    });\r\n\r\npromise\r\n    .then(new IThenCallable<Integer, String>() {\r\n        @Override\r\n        public Void apply(Integer input) throws Exception {\r\n            String result = String.format(\"%d * 10 = %d\", input, input * 10);\r\n            System.out.println(result);\r\n\r\n            return result;\r\n        }\r\n    });\r\n\r\niou.resolve(42); // prints \"42\" and \"42 * 10 = 420\" in exactly this order\r\n```\r\n### Rejecting a promise\r\n```java\r\niou.getPromise()\r\n    .then(new IThenCallable<Integer, Integer>() {\r\n        @Override\r\n        public Integer apply(Integer integer) throws Exception {\r\n            return integer * 42;\r\n        }\r\n    }, new IThenCallable<Object, Void>() {\r\n        @Override\r\n        public Void apply(Object reason) throws Exception {\r\n            System.out.println(String.format(\"%s I can't do that.\", reason));\r\n\r\n            return null;\r\n        }\r\n    });\r\n\r\niou.reject(\"I'm sorry, Dave.\"); // prints \"I'm sorry, Dave. I can't do that.\"\r\n```\r\n### Failing a promise\r\n```java\r\niou.getPromise()\r\n    .then(new IThenCallable<Integer, Integer>() {\r\n        @Override\r\n        public Integer apply(Integer input) throws Exception {\r\n            throw new Exception(\"I just don't care.\");\r\n        }\r\n    })\r\n    .then(new IThenCallable<Integer, Void>() {\r\n        @Override\r\n        public Void apply(Integer input) throws Exception {\r\n            System.out.println(\"What would you say it is you do here?\");\r\n\r\n            return null;\r\n        }\r\n    } ,new IThenCallable<Object, Void>() {\r\n        @Override\r\n        public Void apply(Object reason) throws Exception {\r\n            System.out.println(String.format(\"It's not that I'm lazy, it's that %s\", ((Exception)reason).getMessage()));\r\n\r\n            return null;\r\n        }\r\n    });\r\n\r\niou.resolve(42); // prints \"It's not that I'm lazy, it's that I just don't care.\"\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}